#!/bin/sh

VERSION=1.1

set -e

die() {
  echo "Error: $*" >&2
  exit 1
}

usage() {
  cat <<EOF
Usage: ${0##*/} export|unexport [OPTIONS] PIN [VALUE]
       ${0##*/} output [OPTIONS] PIN [VALUE]
       ${0##*/} input [OPTIONS] PIN
       ${0##*/} set [OPTIONS] PIN VALUE
       ${0##*/} get [OPTIONS] PIN
       ${0##*/} status [OPTIONS] PIN

Options:
 -q or --quiet          Turn off verbosity.
 -h or --help           Display this message.
 -v or --version        Display the version.
EOF
}

while [ $# -ne 0 ] ; do
  if [ "$1" = "-h" ] || [ "$1" = "--help" ] ; then
    usage
    exit 0
  elif [ "$1" = "-V" ] || [ "$1" = "--version" ] ; then
    echo $VERSION
    exit 0
  elif [ "$1" = "-q" ] || [ "$1" = "--quiet" ] ; then
    QUIET=1
  elif [ -z "$FUNC" ] ; then
    FUNC=$1
  elif [ -z "$PIN" ] ; then
    PIN=$1
  elif [ -z "$VALUE" ] ; then
    VALUE=$1
  else
    usage
    die "Too many arguments!"
  fi
  shift
done

( [ -n "$FUNC" ] && [ -n "$PIN" ] ) || {
  usage
  die "Too few arguments!"
}

KERNEL=$(uname -r)
f=1
maj=$(echo $KERNEL | cut -d. -f$f)
f=$(($f + 1))
if [ "$maj" -lt 3 ]; then
  maj=$maj.$(echo $KERNEL | cut -d. -f$f)
  f=$(($f + 1))
fi
min=$(echo $KERNEL | cut -d. -f$f)
f=$(($f + 1))
rev=$(echo $KERNEL | cut -d. -f$f)

if [ "$min" -lt 8 ]; then
  PIN=$(($PIN + 32))
  NAME=gpio$PIN
elif [ ${PIN:0:1} = P ]; then
  PIN=${PIN:1}
  NAME=pio$PIN
  PIN="$(echo $(((0x${PIN:0:1} - 0xA) * 32 + ${PIN:1:2})))"
else
  NAME="pio\
$(echo "$PIN" | awk '{ printf("%c", int(($1 / 32) + 0x41))}')\
$(echo "$PIN" | awk '{ print int($1 % 32) }')"
fi

gpio_direction() {
  cat /sys/class/gpio/$NAME/direction
}

gpio_input() {
  if test "$(gpio_direction)" != in ; then
    echo in > /sys/class/gpio/$NAME/direction
  fi
}

gpio_output() {
  if test "$(gpio_direction)" != out ; then
    echo out > /sys/class/gpio/$NAME/direction
  fi
}

gpio_get() {
  cat /sys/class/gpio/$NAME/value
}

gpio_set() {
  if test "$(cat /sys/class/gpio/$NAME/direction)" != out ; then
    echo out > /sys/class/gpio/$NAME/direction
  fi
  echo $1 > /sys/class/gpio/$NAME/value
}

case "$FUNC" in
  export)
    if ! test -d /sys/class/gpio/$NAME ; then
      echo $PIN > /sys/class/gpio/export
    fi

    if test -n "$VALUE" ; then
      echo out > /sys/class/gpio/$NAME/direction
      gpio_set $VALUE
    else
      [ "${QUIET:-0}" = 1 ] || gpio_get
    fi
    ;;
  unexport)
    if test -d /sys/class/gpio/$NAME ; then
      if test -n "$VALUE" && test "$(gpio_direction)" = out ; then
        gpio_set $VALUE
      else
        [ "${QUIET:-0}" = 1 ] || gpio_get
      fi
      echo $PIN > /sys/class/gpio/unexport
    fi
    ;;
  input)
    if ! test -d /sys/class/gpio/$NAME ; then
      die "gpio-$PIN pin is not exported!"
    fi
    gpio_input
    [ "${QUIET:-0}" = 1 ] || gpio_get
    ;;
  output)
    if ! test -d /sys/class/gpio/$NAME ; then
      die "gpio-$PIN pin is not exported!"
    fi
    gpio_output
    if test -n "$VALUE" ; then
      gpio_set $VALUE
    fi
    [ "${QUIET:-0}" = 1 ] || gpio_get
    ;;
  set)
    [ -n "$VALUE" ] || die "Too few arguments!"
    if ! test -d /sys/class/gpio/$NAME ; then
      die "gpio-$PIN pin is not exported!"
    fi
    gpio_set $VALUE
    ;;
  get)
    if ! test -d /sys/class/gpio/$NAME ; then
      die "gpio-$PIN pin is not exported!"
    fi
    gpio_get $VALUE
    ;;
  status)
    if test -d /sys/class/gpio/$NAME ; then
      if test "$(gpio_direction)" = out ; then
        echo exported out $(gpio_get)
      else
        echo exported in
      fi
    else
      echo unexported
    fi
    ;;
  *)
    usage
    die "Unknown function $FUNC!"
    exit 1
    ;;
esac
